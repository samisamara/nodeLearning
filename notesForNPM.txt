NPM % PACKAGE.JSON
-----------------------------------------------
whenever we want to install third party packages from NPM, it is always a good idea to set up a package.json file
The way we'd do this is to type in the terminal "npm init", which INITIALIZES a package.json file.
This code will as several questions, but we can hit enter to make it use the default answers. 
Once this is done, a package.json file will be added to our project

PACKAGE.JSON DETAILS
-----------------------------------------------
Once we look in the package.json file, we will see that it keeps track of several different bits of information about our project
This includes information such as the name, version, description, scripts, and so on
What we care about the most in this case is this will also keep track of our project dependencies
Dependencies are all the packages we install locally into this project. 
Those packages become things the project DEPENDS on, hence the name "dependencies"

INSTALLING A THIRD PARTY PACKAGE
-----------------------------------------------
Whenever we want to install a third party package, we want to visit the NPM website, search for the specific package, and check the instructions to install
For example, we installed lodash, a javascript library that helps with simplifying strings, numbers, arrays, functions, and objects
the moment we install a new package, a new "dependencies" object gets added to package.json
Just like everything else, package.json will now keep track of all of our dependencies.
If we install a first third party package, package.json creates a new dependencies object.
If we install more packages, package.json will simply append it to the dependencies object.

When we install a new package into our project, there is a secondary thing it does. 
It creates the node_modules folder, which contains all the files and folders that are needed for that package and all the dependencies needed as well
Keep in mind that we will never ever have to manually go inside the node_modules folder. They are just kept there.

SHARING CODE
-----------------------------------------------
If we wanted to share our code with other colleagues or friends, we usually upload our code onto github
However, when we do that, github excludes the node_modules folder.
This is because this folder becomes absolutely massive, especially when we add several different packages
This is not a problem, however. In the package.json file, it lists all the dependencies we added into the project
Because of this, all we have to do is type "npm install" in the terminal, and it will automatically download all the required dependencies listed
It will download everything we need in one go
** THIS IS WHY WHEN YOU DOWNLOAD SOMETHING OFF OF GITHUB IT SOMETIMES DOES NOT WORK. KEEP THIS IN MIND


** QUICK NOTES **
When we install anything from NPM, there are a couple important things to note. 
If we want to install something globally on our computer, we might get an error message that we do not have the right permissions
When that happens, we have to use the keyword "sudo" which signifies we are running this command as the administrator/root.
EX: [npm install -g lodash] will instead become [sudo npm install -g lodash]

If we just want to install a package locally (only within 1 project) we simply just do not include the global (-g) keyword

[npm i] works the same as [npm install]. "i" is just a shortcut for "install"

A package we installed globally is the nodemon package. 
This lets us run a server and update the code without having to constantly close the server and reopen it
